#include <iostream>
#include <cstring>

using namespace std;

struct NODE {
	  int val;
    NODE *left;
    NODE *right;
};

NODE *make_tree() {
	  int val;
	  cin >> val;
	  if (val == 0) return NULL;
	  
	  NODE *n = new NODE;
	  n->val = val;
	  n->left  = make_tree();  // left tree
	  n->right = make_tree();  // right tree

	  return(n);
}

int right_view[2000], max_depth;
void prt_tree(NODE *n, int k) {
	  if (n == NULL) {
	  	if(k>max_depth) max_depth = k;
	  	return;
	  }
	  right_view[k] = n->val;
	  //cout << n <<endl;
	  prt_tree(n->left, k+1);
	  
	  //= print val with k Tabs
	  //for (int i=0; i<k; i++) cout << "\t"; 
	  //cout << n->val << endl;
	  
	  // 你寫答案 (上面兩行，先印看看，之後註解掉！)
    
	  prt_tree(n->right, k+1); 
}

void free_tree(NODE *n) {
	  if (n == NULL) return;
	  
	  free_tree(n->left);
	  free_tree(n->right);
	  delete n;
}

int main()
{
    int t; cin >> t;
    while (t--) {
    	  
    	  NODE *root = make_tree();
    	  
    	  max_depth = 0;
    	  memset(right_view, 0, sizeof(right_view));
    	  
        prt_tree(root, 0);
        
        for (int i=0; i<=max_depth-1; i++)
            cout << right_view[i] << (i==max_depth-1 ? "\n": " ");
    
        free_tree(root);
    }
    return 0;
}
